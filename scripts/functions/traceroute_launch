#!/bin/sh
# Copyright (C) 2019 iopsys Software Solutions AB
# Author: AMIN Ben Ramdhane <amin.benramdhane@pivasoftware.com>

UCI_GET_BBFDM="/sbin/uci -q -c /etc/bbfdm get"
UCI_SET_BBFDM="/sbin/uci -q -c /etc/bbfdm set"
UCI_ADD_BBFDM="/sbin/uci -q -c /etc/bbfdm add"
UCI_DELETE_BBFDM="/sbin/uci -q -c /etc/bbfdm delete"
UCI_SHOW_BBFDM="/sbin/uci -q -c /etc/bbfdm show"

traceroute_get() {
	local val=`$UCI_GET_BBFDM $1`
	echo ${val:-$2}
}

traceroute_launch() {
	local i res host ip time=0
	[ "$1" == "cwmp" ] && [ "`$UCI_GET_BBFDM dmmap_diagnostics.traceroute.DiagnosticState`" != "Requested" ] && return
	local host=`traceroute_get dmmap_diagnostics.traceroute.Host`
	local cnt=`traceroute_get dmmap_diagnostics.traceroute.NumberOfTries 3`
	local dsize=`traceroute_get dmmap_diagnostics.traceroute.DataBlockSize 38`
	local timeout=`traceroute_get dmmap_diagnostics.traceroute.Timeout 5000`
	local maxhop=`traceroute_get dmmap_diagnostics.traceroute.MaxHops 30`
	local proto=`traceroute_get dmmap_diagnostics.traceroute.ProtocolVersion Any`
	[ "$host" = "" ] && return
	timeout=$((timeout/1000))
	[ "$timeout" = "0" ] && timeout = "1"
	i=-2
	delete_all_route_hops
	rm -f /tmp/traceres
	[ "$proto" = "Any" ] && traceroute -m $maxhop -w $timeout -q $cnt $host $dsize 2>&1 >/tmp/traceres
	[ "$proto" = "IPv4" ] && traceroute -m $maxhop -w $timeout -q $cnt -4 $host $dsize 2>&1 >/tmp/traceres
	[ "$proto" = "IPv6" ] && traceroute -m $maxhop -w $timeout -q $cnt -6 $host $dsize 2>&1 >/tmp/traceres
	while read _ host ip time _; do
		[ "$host" = "*" -a "$ip" = "*" ] && continue
		let i++
		[ "$i" = "-1" ] && continue;
		ip=${ip#(}; ip=${ip%)}
		time=${time%.*}
		$UCI_ADD_BBFDM dmmap_diagnostics RouteHops
		$UCI_SET_BBFDM dmmap_diagnostics.@RouteHops[$i].host=$host
		$UCI_SET_BBFDM dmmap_diagnostics.@RouteHops[$i].ip=$ip
		$UCI_SET_BBFDM dmmap_diagnostics.@RouteHops[$i].time=$time
	done < /tmp/traceres
	rm -f /tmp/traceres
	let i++

	[ "$1" == "cwmp" ] && $UCI_SET_BBFDM dmmap_diagnostics.traceroute.DiagnosticState=Complete
	$UCI_SET_BBFDM dmmap_diagnostics.traceroute.NumberOfHops=$i
	$UCI_SET_BBFDM dmmap_diagnostics.traceroute.ResponseTime=$($UCI_GET_BBFDM dmmap_diagnostics.@RouteHops[-1].time)
	[ "$1" == "cwmp" ] && event_diagnostic
}

delete_all_route_hops() {
	local j
	for j in $($UCI_SHOW_BBFDM dmmap_diagnostics | grep "dmmap_diagnostics.@RouteHops.*=RouteHops"); do
		$UCI_DELETE_BBFDM dmmap_diagnostics.@RouteHops[-1]
	done
}

event_diagnostic() {
	local e=1
	local i=0
	while [ "$e" != 0 -a $i -lt 200 ]; do
		ubus -t 1 call tr069 inform '{"event":"8 DIAGNOSTICS COMPLETE"}'
		e=$?
		[ "$e" != "0" ] && sleep 1;
		let i++
	done
}

traceroute_stop() {
	delete_all_route_hops
	local pids=`ps aux | grep traceroute_launch | grep -v grep | grep -v stop | awk '{print $2}'`
	[ -z "$pids" ] && pids=`ps | grep traceroute_launch | grep -v grep | grep -v stop | awk '{print $2}'`
	if [ -n "$pids" ]; then
		kill -9 $pids 2>/dev/null
		$UCI_SET_BBFDM dmmap_diagnostics.traceroute.DiagnosticState=None
	fi
}

if [ "$1" == "run" ]; then
	traceroute_launch $2 2>/dev/null  
elif [ "$1" == "stop" ]; then
	traceroute_stop 2>/dev/null
else
	return
fi
