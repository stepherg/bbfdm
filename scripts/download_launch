#!/bin/sh
# Copyright (C) 2019 iopsys Software Solutions AB
# Author: IMEN Bhiri <imen.bhiri@pivasoftware.com>
# Author: AMIN Ben Ramdhane <amin.benramdhane@pivasoftware.com>

UCI_GET_BBFDM="/sbin/uci -q -c /etc/bbfdm get"
UCI_SET_BBFDM="/sbin/uci -q -c /etc/bbfdm set"
UCI_ADD_BBFDM="/sbin/uci -q -c /etc/bbfdm add"
UCI_DELETE_BBFDM="/sbin/uci -q -c /etc/bbfdm delete"
UCI_COMMIT_BBFDM="/sbin/uci -q -c /etc/bbfdm commit"
CAPTURE_FILE="/tmp/download_dump"
DOWNLOAD_DIAGNOSTIC_FILE="/tmp/bbfdm_download_diagnostic"
CONNECTION_TIMEOUT=10

download_get() {
	local val=`$UCI_GET_BBFDM $1`
	echo ${val:-$2}
}

download_launch() {
	local proto tx_bytes_before rx_bytes_before time1 tx_bytes_after rx_bytes_after time2 periodtime error_code
	local url=$1
	local device=$2
	[ "$url" = "" ] && { $UCI_SET_BBFDM dmmap_diagnostics.download.DiagnosticState=Error_InitConnectionFailed; $UCI_COMMIT_BBFDM; return; }
	local protocol=`download_get dmmap_diagnostics.download.ProtocolVersion Any`
	if [ "$protocol" == "IPv4" ]; then proto="-4"; elif [ "$protocol" == "IPv6" ]; then proto="-6"; else proto=""; fi
	# Disable acceleration on Broadcom devices to capture all packets with tcpdump
	[ -e /usr/sbin/fcctl ] && { fcctl disable >/dev/null 2>&1; fcctl flush >/dev/null 2>&1; }
	tcpdump -i $device tcp -w ${CAPTURE_FILE} > /dev/null 2>&1 &
	PID=$!
	sleep 1
	if [ ${url:0:7} = http:// -o ${url:0:6} = ftp:// ]; then
		tx_bytes_before=`ubus call network.device status "{'name':'$device'}" | jsonfilter -e @.statistics.tx_bytes`
		rx_bytes_before=`ubus call network.device status "{'name':'$device'}" | jsonfilter -e @.statistics.rx_bytes`
		time1=`date +%s`
		curl $proto --fail --silent --retry 1 --connect-timeout ${CONNECTION_TIMEOUT} -o ${DOWNLOAD_DIAGNOSTIC_FILE} $url
		error_code="$?"
		time2=`date +%s`
		tx_bytes_after=`ubus call network.device status "{'name':'$device'}" | jsonfilter -e @.statistics.tx_bytes`
		rx_bytes_after=`ubus call network.device status "{'name':'$device'}" | jsonfilter -e @.statistics.rx_bytes`
		[ "$error_code" == "6" ] && { $UCI_SET_BBFDM dmmap_diagnostics.download.DiagnosticState=Error_CannotResolveHostName; $UCI_COMMIT_BBFDM; kill $PID 2> /dev/null; return; }
		[ "$error_code" == "7" ] && { $UCI_SET_BBFDM dmmap_diagnostics.download.DiagnosticState=Error_InitConnectionFailed; $UCI_COMMIT_BBFDM; kill $PID 2> /dev/null; return; }
		[ "$error_code" == "22" ] && { $UCI_SET_BBFDM dmmap_diagnostics.download.DiagnosticState=Error_NoResponse; $UCI_COMMIT_BBFDM; kill $PID 2> /dev/null; return; }
		[ "$error_code" == "27" ] && { $UCI_SET_BBFDM dmmap_diagnostics.download.DiagnosticState=Error_IncorrectSize; $UCI_COMMIT_BBFDM; kill $PID 2> /dev/null; return; }
		[ "$error_code" == "28" ] && { $UCI_SET_BBFDM dmmap_diagnostics.download.DiagnosticState=Error_Timeout; $UCI_COMMIT_BBFDM; kill $PID 2> /dev/null; return; }
		[ "$error_code" != "0" ] && { $UCI_SET_BBFDM dmmap_diagnostics.download.DiagnosticState=Error_Other; $UCI_COMMIT_BBFDM; kill $PID 2> /dev/null; return; }
	fi
	tx_bytes=$((tx_bytes_after-tx_bytes_before))
	rx_bytes=$((rx_bytes_after-rx_bytes_before))
	periodtime=$(($((time2-time1))*1000000))
	$UCI_SET_BBFDM dmmap_diagnostics.download.DiagnosticState=Complete
	$UCI_SET_BBFDM dmmap_diagnostics.download.TotalBytesReceived=$rx_bytes
	$UCI_SET_BBFDM dmmap_diagnostics.download.TotalBytesSent=$tx_bytes
	$UCI_SET_BBFDM dmmap_diagnostics.download.PeriodOfFullLoading=$periodtime
	local perconnection=`$UCI_GET_BBFDM dmmap_diagnostics.download.EnablePerConnection`
	if ([ "$perconnection" == "true" ] || [ "$perconnection" == "1" ]); then
		$UCI_ADD_BBFDM dmmap_diagnostics DownloadPerConnection
		$UCI_SET_BBFDM dmmap_diagnostics.@DownloadPerConnection[0].TotalBytesReceived=$rx_bytes
		$UCI_SET_BBFDM dmmap_diagnostics.@DownloadPerConnection[0].TotalBytesSent=$tx_bytes
	else
		$UCI_DELETE_BBFDM dmmap_diagnostics.@DownloadPerConnection[0]
	fi
	$UCI_COMMIT_BBFDM
	rm ${DOWNLOAD_DIAGNOSTIC_FILE} 2>/dev/null
	sleep 1
	local pids=`ps | grep $PID`
	kill $PID &>/dev/null
	# Enable acceleration on Broadcom devices after killing the tcpdump pid 
	[ -e /usr/sbin/fcctl ] && { fcctl enable >/dev/null 2>&1; fcctl flush >/dev/null 2>&1; }
}

download_stop_diagnostic() {
	$UCI_DELETE_BBFDM dmmap_diagnostics.@DownloadPerConnection[0]
	local pids=`ps | grep download_launch.*run | grep -v grep | awk '{print $1}'`
	if [ -n "$pids" ]; then
		kill -9 $pids &>/dev/null
		$UCI_SET_BBFDM dmmap_diagnostics.download.DiagnosticState=None
	fi
	local pids=`ps | grep download_launch.*run | grep -v grep | awk '{print $1}'`
    if [ -n "$pids" ]; then
    	kids=$(grep -l "PPid.*$pids" /proc/*/task/*/status | grep -o "[0-9]*")
		for kid in $kids; do
	    	kill -9 $kid &>/dev/null                                                   
	    done
	    kill -9 $pids &>/dev/null                                                               
	    $UCI_SET_BBFDM dmmap_diagnostics.download.DiagnosticState=None      
    fi
    $UCI_COMMIT_BBFDM
}

if [ "$1" == "run" ] ; then
	download_launch $2 $3
elif [ "$1" == "stop" ]; then
	download_stop_diagnostic
else
	return
fi
