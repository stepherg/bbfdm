#!/bin/sh
# Copyright (C) 2022 iopsys Software Solutions AB
# Author: AMIN Ben Ramdhane <amin.benramdhane@pivasoftware.com>

. /usr/share/libubox/jshn.sh

ROOT="$(dirname "${0}")"
. "${ROOT}"/bbf_api

serverselection_error() {
	json_init
	json_add_string "Status" "$1"
	json_add_string "FastestHost" ""
	json_add_string "IPAddressUsed" ""
	json_add_int "MinimumResponseTime" "9999"
	json_add_int "AverageResponseTime" "0"
	json_add_int "MaximumResponseTime" "0"
	json_dump

	# Store data in dmmap_diagnostics for both protocols (cwmp/usp)
	[ "$3" = "both_proto" ] && {
		$UCI_SET_BBF_DMMAP dmmap_diagnostics.serverselection.DiagnosticState="$1"
		$UCI_SET_BBF_DMMAP dmmap_diagnostics.serverselection.FastestHost=""
		$UCI_SET_BBF_DMMAP dmmap_diagnostics.serverselection.MinimumResponseTime=9999
		$UCI_SET_BBF_DMMAP dmmap_diagnostics.serverselection.AverageResponseTime=0
		$UCI_SET_BBF_DMMAP dmmap_diagnostics.serverselection.MaximumResponseTime=0
		$UCI_COMMIT_BBF_DMMAP
	}
}

serverselection_launch() {
	input="$1"

	json_load "${input}"
	
	json_get_var hostlist hostlist
	json_get_var port port
	json_get_var iface iface
	json_get_var ip_proto ip_proto
	json_get_var nbr_of_rep nbr_of_rep
	json_get_var timeout timeout
	json_get_var protocol_used protocol_used
	json_get_var proto proto

	# Assign default value
	[ -z "${nbr_of_rep}" ] && nbr_of_rep=3
	[ -z "${port}" ] && port=7
	[ -z "${protocol_used}" ] && protocol_used="ICMP"
	ip_addr_used=$(get_ip_addr_used "${ip_proto}" "${iface}")
	if [ "$ip_proto" = "IPv4" ]; then ip_proto="-4"; elif [ "$ip_proto" = "IPv6" ]; then ip_proto="-6"; else ip_proto=""; fi
	[ -z "${timeout}" ] && timeout=1 || timeout=$((timeout/1000))

	# Fail if hostlist is empty
	[ -z "${hostlist}" ] && {
		serverselection_error "Error_Internal" "${nbr_of_rep}" "${proto}"
		return
	}

	micros=1000
	success_count=0
	avg_time_sum=0
	avg_time_host=9999999
	min=9999999
	max=0
	i=0

	for host in $(echo "$hostlist" | tr "," "\n"); do
		if [ "$protocol_used" = "ICMP" ]; then
			[ -n "${iface}" ] && device=$(ifstatus "${iface}" | jsonfilter -e @.l3_device) && device="-I $device" || device=""
			
			while [ $i -lt "$nbr_of_rep" ]; do
				i=$((i+1))

				res=$(ping -q ${ip_proto} -c 1 -W ${timeout} ${device} "${host}" 2>&1)

				ba=$(echo "$res" | grep "bad address")
				[ -n "$ba" ] && {
					serverselection_error "Error_CannotResolveHostName" "${nbr_of_rep}" "${proto}"
					return
				}

				ba=$(echo "$res" | grep "unknown host")
				[ -n "$ba" ] && {
					serverselection_error "Error_CannotResolveHostName" "${nbr_of_rep}" "${proto}"
					return
				}

				stc=$(echo "$res" | grep "received")
				[ -z "$stc" ] && {
					serverselection_error "Error_Other" "${nbr_of_rep}" "${proto}"
					return
				}

				times=$(echo "$res" | grep "min/avg/max")
				[ -z "$times" ] && break

				sc1=$(echo "$stc" | awk '{print $4}')
				sc1=${sc1:-0}
				success_count=$((success_count+sc1))
				times=$(echo "$times" | awk -F'=' '{ print $2 }')
				min_time=$(echo "$times" | awk -F'[=/ ]' '{ print $2 }')	
				avg_time=$(echo "$times" | awk -F'[=/ ]' '{ print $3 }')
				max_time=$(echo "$times" | awk -F'[=/ ]' '{ print $4 }')
				min_time=${min_time:-0}
				avg_time=${avg_time:-0}
				max_time=${max_time:-0}
				min_time=$(echo "$min_time" "$micros" | awk '{printf "%3.0f\n",$1*$2}')
				avg_time=$(echo "$avg_time" "$micros" | awk '{printf "%3.0f\n",$1*$2}')
				max_time=$(echo "$max_time" "$micros" | awk '{printf "%3.0f\n",$1*$2}')
				[ "$min_time" -lt "$min" ] && min="$min_time"
				[ "$max_time" -gt "$max" ] && max="$max_time"
				avg_time_sum=$((avg_time_sum+avg_time))
			done
		else
			[[ "$host" == *"."* ]] && ip_proto="4" || ip_proto="6"
			[ -n "${iface}" ] && device=$(ifstatus "${iface}" | jsonfilter -e @.l3_device) && device="-i $device" || device=""
			
			while [ $i -lt "$nbr_of_rep" ]; do
				i=$((i+1))

				res=$(udpechoclientd -c 1 -t $timeout --host "$host" --port "$port" --protocol "$ip_proto" $device 2>&1)

				ba=$(echo "$res" | grep "Can't Resolve Host Name")
				[ -n "$ba" ] && {
					serverselection_error "Error_CannotResolveHostName" "${nbr_of_rep}" "${proto}"
					return
				}

				ba=$(echo "$res" | grep "RCVD")
				[ -z "$ba" ] && {
					serverselection_error "Error_CannotResolveHostName" "${nbr_of_rep}" "${proto}"
					return
				}

				times=$(echo "$res" | grep "rtt")
				[ -z "$times" ] && continue

				sc1=$(echo "$res" | grep "Rcvd" | awk -F': ' '{print $3}' | awk -F'(' '{ print $1 }')
				sc1=${sc1:-0}
				success_count=$((success_count+sc1))
				max_time=$(echo "$times" | awk -F': ' '{ print $2 }' | awk -F'ms' '{ print $1 }')
				min_time=$(echo "$times" | awk -F': ' '{ print $3 }' | awk -F'ms' '{ print $1 }')
				avg_time=$(echo "$times" | awk -F': ' '{ print $4 }' | awk -F'ms' '{ print $1 }')
				min_time=${min_time:-0}
				avg_time=${avg_time:-0}
				max_time=${max_time:-0}
				min_time=$(echo "$min_time" $micros | awk '{printf "%3.0f\n",$1*$2}')
				avg_time=$(echo "$avg_time" $micros | awk '{printf "%3.0f\n",$1*$2}')
				max_time=$(echo "$max_time" $micros | awk '{printf "%3.0f\n",$1*$2}')
				[ "$min_time" -lt "$min" ] && min="$min_time"
				[ "$max_time" -gt "$max" ] && max="$max_time"
				avg_time_sum=$((avg_time_sum+avg_time))
			done
		fi

		[ $success_count -gt 0 ] && avg_time=$((avg_time_sum/success_count)) || avg_time=0
		[ "$avg_time" != "0" ] && [ $avg_time -lt $avg_time_host ] && avg_time_host="$avg_time" && min_time_host="$min" && max_time_host="$max" && fasthost="$host"
		success_count=0
		avg_time_sum=0
		min=9999999
		max=0
		i=0
	done

	json_init
	json_add_string "Status" "Complete"
	json_add_string "FastestHost" "${fasthost}"
	json_add_string "IPAddressUsed" "${ip_addr_used}"
	json_add_int "MinimumResponseTime" "${min_time}"
	json_add_int "AverageResponseTime" "${avg_time}"
	json_add_int "MaximumResponseTime" "${max_time}"
	json_dump

	# Store data in dmmap_diagnostics for both protocols (cwmp/usp)
	[ "${proto}" = "both_proto" ] && {
		$UCI_SET_BBF_DMMAP dmmap_diagnostics.serverselection.DiagnosticState="Complete"
		$UCI_SET_BBF_DMMAP dmmap_diagnostics.serverselection.FastestHost="${fasthost}"
		$UCI_SET_BBF_DMMAP dmmap_diagnostics.serverselection.IPAddressUsed="${ip_addr_used}"
		$UCI_SET_BBF_DMMAP dmmap_diagnostics.serverselection.MinimumResponseTime="${min_time_host}"
		$UCI_SET_BBF_DMMAP dmmap_diagnostics.serverselection.AverageResponseTime="${avg_time_host}"
		$UCI_SET_BBF_DMMAP dmmap_diagnostics.serverselection.MaximumResponseTime="${max_time_host}"
		$UCI_COMMIT_BBF_DMMAP
	}
}

if [ -n "$1" ]; then
	serverselection_launch "$1"
else
	serverselection_error "Error_Internal" "1"
fi
